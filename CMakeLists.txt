# croscan CMake script
# by kimzhang
CMAKE_MINIMUM_REQUIRED(VERSION 2.4)

IF(COMMAND cmake_policy)
    cmake_policy(SET CMP0003 NEW)
ENDIF(COMMAND cmake_policy)

PROJECT(croscan)

#SET(CMAKE_DEBUG_POSTFIX d)

SET(BUILD_WITH_STATIC_CRT 1)
SET(BUILD_WITH_DEBUG_INFO 1)
if(MSVC)
    ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE)
    ADD_DEFINITIONS(-D_SCL_SECURE_NO_DEPRECATE)
    if(BUILD_WITH_STATIC_CRT)
        foreach(flag_var
                CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE
                CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO
                CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE
                CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)
           if(${flag_var} MATCHES "/MD")
              string(REGEX REPLACE "/MD" "/MT" ${flag_var} "${${flag_var}}")
           endif()
           if(${flag_var} MATCHES "/MDd")
              string(REGEX REPLACE "/MDd" "/MTd" ${flag_var} "${${flag_var}}")
           endif()
        endforeach(flag_var)
        
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /NODEFAULTLIB:atlthunk.lib /NODEFAULTLIB:msvcrt.lib /NODEFAULTLIB:msvcrtd.lib")
        set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} /NODEFAULTLIB:libcmt.lib")
        set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /NODEFAULTLIB:libcmtd.lib")
    else(BUILD_WITH_STATIC_CRT)
        foreach(flag_var
                CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE
                CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO
                CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE
                CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)
           if(${flag_var} MATCHES "/MT")
              string(REGEX REPLACE "/MT" "/MD" ${flag_var} "${${flag_var}}")
           endif()
           if(${flag_var} MATCHES "/MTd")
              string(REGEX REPLACE "/MTd" "/MDd" ${flag_var} "${${flag_var}}")
           endif()
        endforeach(flag_var)
    endif(BUILD_WITH_STATIC_CRT)

    if(NOT BUILD_WITH_DEBUG_INFO)
        string(REPLACE "/debug" "" CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG}")
        string(REPLACE "/DEBUG" "" CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG}")
        string(REPLACE "/INCREMENTAL:YES" "/INCREMENTAL:NO" CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG}")
        string(REPLACE "/INCREMENTAL " "/INCREMENTAL:NO " CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG}")

        string(REPLACE "/debug" "" CMAKE_MODULE_LINKER_FLAGS_DEBUG "${CMAKE_MODULE_LINKER_FLAGS_DEBUG}")
        string(REPLACE "/DEBUG" "" CMAKE_MODULE_LINKER_FLAGS_DEBUG "${CMAKE_MODULE_LINKER_FLAGS_DEBUG}")
        string(REPLACE "/INCREMENTAL:YES" "/INCREMENTAL:NO" CMAKE_MODULE_LINKER_FLAGS_DEBUG "${CMAKE_MODULE_LINKER_FLAGS_DEBUG}")
        string(REPLACE "/INCREMENTAL " "/INCREMENTAL:NO " CMAKE_MODULE_LINKER_FLAGS_DEBUG "${CMAKE_MODULE_LINKER_FLAGS_DEBUG}")

        string(REPLACE "/debug" "" CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG}")
        string(REPLACE "/DEBUG" "" CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG}")
        string(REPLACE "/INCREMENTAL:YES" "/INCREMENTAL:NO" CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG}")
        string(REPLACE "/INCREMENTAL " "/INCREMENTAL:NO " CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG}")

        string(REPLACE "/Zi" "" CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}")
        string(REPLACE "/Zi" "" CMAKE_CXX_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}")
    endif()

endif(MSVC)  

#util
SET(UTIL_DIR ${CMAKE_SOURCE_DIR}/util)
FIND_PACKAGE(UTIL)
INCLUDE_DIRECTORIES(${UTIL_INCLUDE_DIRS})

#detours
#struct
SET(STRUCT_DIR ${CMAKE_SOURCE_DIR}/struct)
FIND_PACKAGE(STRUCT)
INCLUDE_DIRECTORIES(${STRUCT_INCLUDE_DIRS})

#detours
SET(DETOURS_DIR ${CMAKE_SOURCE_DIR}/detours)
FIND_PACKAGE(DETOURS)
INCLUDE_DIRECTORIES(${DETOURS_INCLUDE_DIRS})

#pe
SET(PE_DIR ${CMAKE_SOURCE_DIR}/pe)
FIND_PACKAGE(PE)
INCLUDE_DIRECTORIES(${PE_INCLUDE_DIRS})

#process
SET(PROCESS_DIR ${CMAKE_SOURCE_DIR}/process)
FIND_PACKAGE(PROCESS)
INCLUDE_DIRECTORIES(${PROCESS_INCLUDE_DIRS})

#xml2
SET(XML2_DIR ${CMAKE_SOURCE_DIR}/libxml2)
FIND_PACKAGE(XML2)
INCLUDE_DIRECTORIES(${XML2_INCLUDE_DIRS})

SET(HASH_DIR ${CMAKE_SOURCE_DIR}/hash)
FIND_PACKAGE(HASH)
INCLUDE_DIRECTORIES(${HASH_INCLUDE_DIRS})

SET(SHELL_DIR ${CMAKE_SOURCE_DIR}/shell)
FIND_PACKAGE(SHELL)
INCLUDE_DIRECTORIES(${SHELL_INCLUDE_DIRS})

#ADD_LIBRARY(libpe STATIC IMPORTED)

#IF(${CMAKE_GENERATOR} STREQUAL "MinGW Makefiles")
#ADD_DEFINITIONS(-fshort-wchar)
#SET(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -O0 -g -ggdb")
#SET(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3")
#SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "$ENV{CXXFLAGS} -O3 -g -ggdb")
#SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -static-libgcc -static-libstdc++")
#ELSE()
#SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /machine:x86 ")
#SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /NODEFAULTLIB ")
#SET(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} /MTd")
#SET(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} /MT")
#SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "$ENV{CXXFLAGS} /MT /Zi")
#ENDIF()

#FIND_PATH(UTIL util/CMakeLists.txt PATHS ${PROJECT_SOURCE_DIR})
#INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}//util")
#INCLUDE("pe_lib.cmake")

#avslve.dll
SET(AVSLAVE_SRC_LIST
avslave.cpp
avflush.cpp
)
ADD_LIBRARY(avslave SHARED ${AVSLAVE_SRC_LIST})
SET_TARGET_PROPERTIES(avslave PROPERTIES OUTPUT_NAME "avslave")
SET_TARGET_PROPERTIES(avslave PROPERTIES CLEAN_DIRECT_OUTPUT 1)
SET_TARGET_PROPERTIES(avslave PROPERTIES VERSION 0.1 SOVERSION 1)
TARGET_LINK_LIBRARIES(avslave shlwapi)
TARGET_LINK_LIBRARIES(avslave detours)
TARGET_LINK_LIBRARIES(avslave pe)
TARGET_LINK_LIBRARIES(avslave util)
TARGET_LINK_LIBRARIES(avslave process)
ADD_DEPENDENCIES(avslave detours util	pe)

SET(CROSCAN_SRC_LIST croscan.cpp avctrl.cpp debug.cpp)
ADD_EXECUTABLE(croscan ${CROSCAN_SRC_LIST})
TARGET_LINK_LIBRARIES(croscan util)
TARGET_LINK_LIBRARIES(croscan shlwapi)
TARGET_LINK_LIBRARIES(croscan pe)
TARGET_LINK_LIBRARIES(croscan process)
TARGET_LINK_LIBRARIES(croscan xml2)
TARGET_LINK_LIBRARIES(croscan ws2_32)
TARGET_LINK_LIBRARIES(croscan hash)
TARGET_LINK_LIBRARIES(croscan shell)
ADD_DEPENDENCIES(croscan xml2 util pe process detours hash shell)

ADD_EXECUTABLE(sender sender.cpp)
TARGET_LINK_LIBRARIES(sender process)
ADD_DEPENDENCIES(sender process)

#install
INSTALL(TARGETS avslave	
	LIBRARY DESTINATION bin
	RUNTIME DESTINATION bin)
INSTALL(TARGETS croscan RUNTIME DESTINATION bin)
INSTALL(TARGETS sender RUNTIME DESTINATION bin)
INSTALL(FILES file.list DESTINATION bin)
INSTALL(FILES scanner.xml DESTINATION bin)
INSTALL(FILES README.txt DESTINATION bin)



